name: Create Release

on:
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python (non-Windows)
        if: ${{ !startsWith(matrix.os, 'windows') }}
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set release version
        run: |
          version="${{ github.ref_name }}"
          echo "REL_VERSION=${version#v}" >> $GITHUB_ENV

      - name: Install ubuntu dependencies
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake libsuitesparse-dev libboost-filesystem-dev libboost-system-dev python3-pybind11

      - name: Install macOS dependencies
        if: ${{ startsWith(matrix.os, 'macos') }}
        run: brew install cmake boost suite-sparse pybind11

      - name: Setup MSYS2 (Windows)
        if: ${{ startsWith(matrix.os, 'windows') }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: ucrt64
          update: true
          install: >-
            git
            unzip
            wget
            mingw-w64-ucrt-x86_64-cmake
            mingw-w64-ucrt-x86_64-gcc
            mingw-w64-ucrt-x86_64-ninja
            mingw-w64-ucrt-x86_64-suitesparse
            mingw-w64-ucrt-x86_64-boost
            mingw-w64-ucrt-x86_64-pybind11
            mingw-w64-ucrt-x86_64-python
            mingw-w64-ucrt-x86_64-python-pip
            mingw-w64-ucrt-x86_64-python-pandas

      - name: Get embeddable python (Windows)
        if: ${{ startsWith(matrix.os, 'windows') }}
        shell: msys2 {0}
        run: |
          mkdir -p python/python
          wget https://www.python.org/ftp/python/3.12.10/python-3.12.10-embed-amd64.zip -O python/python.zip
          unzip -o python/python.zip -d python/python
          cp python/python/python312.dll python/python/libpython3.12.dll

      - name: Configure CMake (ubuntu)
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        run: >
          cmake -B build -S . --preset linux-gcc-portable

      - name: Configure CMake (macos)
        if: ${{ startsWith(matrix.os, 'macos') }}
        run: >
          cmake -B build -S . --preset macos-clang-portable

      - name: Configure CMake (windows)
        if: ${{ startsWith(matrix.os, 'windows') }}
        shell: msys2 {0}
        run: >
          cmake -B build --preset mingw-gcc-portable

      - name: Build (windows)
        if: ${{ startsWith(matrix.os, 'windows') }}
        shell: msys2 {0}
        run: cmake --build build -j 4

      - name: Build (unix)
        if: ${{ !startsWith(matrix.os, 'windows') }}
        run: cmake --build build -j 4


      - name: Install Python deps for tests
        if: ${{ !startsWith(matrix.os, 'windows') }}
        run: |
          python -m pip install --upgrade pip
          pip install pandas pint daisypy-test@git+https://github.com/daisy-model/daisypy-test

      - name: Install Python deps for tests (Windows)
        if: ${{ startsWith(matrix.os, 'windows') }}
        shell: msys2 {0}
        run: |
          python -m pip install --upgrade pip
          pip install pandas pint daisypy-test@git+https://github.com/daisy-model/daisypy-test

      - name: Test (unix)
        if: ${{ !startsWith(matrix.os, 'windows') }}
        working-directory: build
        continue-on-error: ${{ startsWith(matrix.os, 'macos') }}
        run: ctest --output-on-failure

      - name: Test (windows)
        if: ${{ startsWith(matrix.os, 'windows') }}
        shell: msys2 {0}
        working-directory: build
        continue-on-error: true
        run: ctest --output-on-failure

      - name: Upload test logs
        if: ${{ always() && !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: test-output-${{ matrix.os }}
          path: build/Testing

      - name: Package (ubuntu)
        if: ${{ startsWith(matrix.os, 'ubuntu') && startsWith(github.ref, 'refs/tags/v') && !contains(github.ref_name, '-') }}
        run: |
          cmake --build build --target package
          mkdir -p release_files
          deb=$(ls build/*.deb | head -n1)
          cp "$deb" "release_files/daisy_${REL_VERSION}_amd64.deb"

      - name: Package (macOS)
        if: ${{ startsWith(matrix.os, 'macos') && startsWith(github.ref, 'refs/tags/v') && !contains(github.ref_name, '-') }}
        run: |
          cmake --build build --target package
          mkdir -p release_files
          pkg=$(ls build/*.pkg | head -n1)
          cp "$pkg" "release_files/daisy-${REL_VERSION}-Darwin.pkg"

      - name: Package (Windows exe)
        if: ${{ startsWith(matrix.os, 'windows') && startsWith(github.ref, 'refs/tags/v') && !contains(github.ref_name, '-') }}
        shell: msys2 {0}
        run: |
          cmake --build build --target package
          mkdir -p release_files
          exe=$(ls build/*.exe | head -n1)
          cp "$exe" "release_files/daisy-${REL_VERSION}-win64.exe"

      - name: Package (Windows zip)
        if: ${{ startsWith(matrix.os, 'windows') && startsWith(github.ref, 'refs/tags/v') && !contains(github.ref_name, '-') }}
        shell: msys2 {0}
        run: |
          cmake --install build --prefix install
          # Use CPack ZIP to generate a portable zip
          (cd build && cpack -G ZIP -C Release)
          zipfile=$(ls build/*.zip | head -n1)
          cp "$zipfile" "release_files/daisy-${REL_VERSION}-win64.zip"

      - name: Upload artifacts
        if: ${{ startsWith(github.ref, 'refs/tags/v') && !contains(github.ref_name, '-') }}
        uses: actions/upload-artifact@v4
        with:
          name: daisy-${{ matrix.os }}-${{ env.REL_VERSION }}
          path: release_files/*

  release:
    name: Create Release
    if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref_name, '-')
    runs-on: ubuntu-latest
    needs: build

    permissions:
      contents: write # to create releases

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/*/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
