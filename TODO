-TODO ---things that needs to be done with Daisy -*- outline -*-

* Fie

** Bo

** Slidgigt

30 maj læge 

* PFAS

AWI component

AWIBrusseau2023 model

AWI::find_area (double Theta, double Theta_sat, double dt50)

AWI::tick (const Soil&, const SoilWater&)

AWI::output

double
AWI::area (size_t c) const; // [cm^2/cm^3]

# function estimating the air water interface area from Brusseau 2023
def a_aw (Theta, Theta_sat, d50_cm):
    a_aw = (-2.85*(Theta/Theta_sat)+3.6)*((1-(Theta/Theta_sat))*3.9*d50_cm**-1.2)
    #print("a_aw", a_aw)
    return a_aw

https://www.sciencedirect.com/science/article/pii/S0048969723023513
Equation 5

** Kør lange simuleringer

*** Prøv at slette små tal

*** bisect: log skala?

** Adsorption Python interface

*** DONE Vælg parametre

*** a_awi (ikke stof afhængig)

*** K_awi (ikke jord afhængig)

** Adsorption AWI modul

** Test samme resultat

** Solute in rain water (time -> concentration)

* PHISHES

** CZ data 03

** Pak taske

* Gas transport

* GMSR

** Færdiggør rapport
 
* hysteresis

** Math:

*** We have two retention curves

Theta_w (h) and Theta_d (h)

*** The two curves must have identical endpoints:
gr
Theta_w (0) = Theta_d (0) = Theta_sat

Theta_w (-inf) = Theta_h (-inf) = Theta_res

*** When we switch from drying to wetting, we scale the curve linearly:

(1) Theta_s (h) = Theta_w (h) * alpha + beta

(2) Theta_s (0) = Theta_sat

(3) Theta_s (h_1) = Theta_1

Where (h_1, Theta_1) are the tension and water content at the point
where we switched from drying to wetting.

We now have two unknowns (alpha and beta) and known points (2) and (3)
to find them with.

Theta_sat = Theta_sat * alpha + beta

Theta_1 = Theta_w (h_1) * alpha + beta

==>

beta = Theta_1 - Theta_w (h_1) * alpha

Theta_sat = Theta_sat * alpha + Theta_1 - Theta_w (h_1) * alpha

Theta_sat - Theta_1 = (Theta_sat - Theta_w (h_1)) * alpha

alpha = (Theta_sat - Theta_1) / (Theta_sat - Theta_w (h_1))
beta = Theta_sat / (Theta_sat * alpha)

** How to find Cw2_s (specific water capacity)

(4) Cw2_s (h) = dTheta_s (h) / dh

Insert (1):

(5) Cw2_s (h) = (dTheta_w (h) * alpha + beta) / dh

==> 

(6) Cw2_s (h) = Cw2_w (h) + alpha

** How to find h_s (Theta)

Theta_s (h) = Theta_w (h) * alpha + beta

==>

Theta_w (h) = (Theta_s (h) - beta) / alpha

h_w (Theta_w (h)) = h_w ((Theta_s (h) - beta) / alpha)

h = h_w ((Theta_s (h) - beta) / alpha)

h = h (!)

h_s (Theta_s) = h_w ((Theta_s - beta) / alpha)

** We need two soil->hydraulic

One for state one for fast access

class HydraulicHysteresis : public Hydraulic
{
  // The two curves.
  const Hydraulic& wetting;
  const Hydraulic& drying;

  // State
  bool is_wetting;
  double Theta_alpha;
  double Theta_beta;
  double K_alpha;
  double K_beta;

  double Theta (double h) const
  {
    if (is_wetting)     
      return wetting.Theta (h) * Theta_alpha + Theta_beta;
   else 
      return drying.Theta (h) * Theta_alpha + Theta_beta;
  }

  double h (double Theta) const
  {
    if (is_wetting)     
      return wetting.h ((Theta - Theta_beta) / Theta_alpha);
   else 
      return drying.h ((Theta - Theta_beta) / Theta_alpha);
  }

  double Cw2 (double h) const
  {
    if (is_wetting)     
      return wetting.Cw2 (h) + Theta_alpha ;
   else 
      return drying.Cw2 (h) + Theta_alpha;
  }

  double K (h) const
  {
    if (is_wetting)     
      return wetting.K (h) * K_alpha + K_beta;
   else 
      return drying.K (h) * K_alpha + K_beta;
  }
  
  
  void tick (double h_old, double h, double dt)
  {
    if (is_wetting && h_old > h)
      {
         Theta_old = Theta (h_old);
         set_drying (h_old, Theta_old);
      }
    if (!is_wetting && h_old < h)
      {
         Theta_old = Theta (h_old);
         set_wetting (h_old, Theta_old);
      }
  }
      
  void set_wetting (double h_s, double Theta_s)
  {
    Theta_sat = wetting.Theta (0)
    Theta_alpha = (Theta_sat - Theta_s) / (Theta_sat - wetting.Theta (h_s))
    Theta_beta = Theta_sat / (Theta_sat * alpha)
    // TODO: Find K_alpha and K_beta
    is_wetting = true;
  }

  void set_drying (double h_s, double Theta_s)
  {
    // TODO: Find Theta_alpha and Theta_beta
    // TODO: Find K_alpha and K_beta
    is_wetting = false;
  }
         
};  
  

** New state variables

** Mofidy functions

*** hyseresis (h_old, h, dt)

*** set_porosity

*** tillage


* Daisy

** Weather:

*** WindHeight [m]

New parameter, mandatory if wind speed is specified

*** Field-Windbreak [dg]

Optional parameter, default 0

* Få Daisy til at oversætte til Windows igen (Fra Linux?)

* Artikler

** Rodartikel ES&M

** OM init

* Skyethed med timeværdier?

* Ny version af Hypres ark

* Ny version af Charlottes afdræningstest.

* Tidlig vækst

Erstat DSLAI05 med Seed baseret tidlig vækst. Søren havde en formel,
men vi skal have en test setup.

* Regression test

* Daisy problemer

** DMI's nye "nedbørskorrigering"

** Ny ligning for biopore til matrix flow fra Søren

** Brug massebalance til at udregne (vertical) flux fra bunden.

Husk drænnoder!

